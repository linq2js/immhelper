{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$removeAt","$push","$filter","$unshift","$pop","$shift","$sort","$remove","$swap","$assign","spec","$if","$switch","$unless","$set","$batch","updatePath","define","configs","separator","Array","prototype","arraySlice","slice","arrayShift","shift","arrayUnshift","unshift","arrayPush","push","arrayPop","pop","arraySplice","splice","arraySort","sort","contextProp","newConfigs","Object","assign","isEqual","a","b","Date","getTime","Immutable","value","parent","path","children","childMap","modifier","args","call","arguments","actions","Error","job","apply","newValue","concat","change","valueUpdated","length","changed","clone","x","newChildren","filter","child","isArray","split","reduce","pattern","specsOrCallback","callback","specs","exp","flags","RegExp","key","test","undefined","originalCallback","result","traversal","root","isPlainObject","entries","pair","childPath","node","childFromPath","processSpec","current","props","prop","forEach","arrayOp","array","index","count","newItems","indexes","newArray","sorter","newObject","val","constructor","items","indexOf","from","to","temp","obj","values","mergedObj","createSelectorProxy","context","proxy","Proxy","get","target","set","thisArg","action","backToParent","condition","thenSpec","elseSpec","makeChoice","default","processSubSpec","limit","applied","keys","newChild","charAt","descendants","substr","update","state","changes","selector","batch","remove","toggle","unset","swap","removeAt","if","unless","switch","cloneIfPossible","name","disableAutoClone"],"mappings":";;;;;;;;;;;;QAegBA,S,GAAAA,S;QAuLAC,O,GAAAA,O;QAYAC,M,GAAAA,M;QAmDAC,O,GAAAA,O;QAUAC,S,GAAAA,S;QAkBAC,K,GAAAA,K;QAQAC,O,GAAAA,O;QAMAC,Q,GAAAA,Q;QAQAC,I,GAAAA,I;QAOAC,M,GAAAA,M;QAOAC,K,GAAAA,K;QAqBAC,O,GAAAA,O;QAMAC,K,GAAAA,K;QAQAC,O,GAAAA,O;QA+CAC,I,GAAAA,I;QASAC,G,GAAAA,G;QAIAC,O,GAAAA,O;QAWAC,O,GAAAA,O;QAIAC,I,GAAAA,I;QA4EAC,M,GAAAA,M;QAgBAC,U,GAAAA,U;QAmEAC,M,GAAAA,M;;;;AAllBhB,IAAMC,UAAU;AACd;AACAC,aAAW;AAFG,CAAhB;;uBAaIC,MAAMC,S;IAPDC,U,oBAAPC,K;IACOC,U,oBAAPC,K;IACSC,Y,oBAATC,O;IACMC,S,oBAANC,I;IACKC,Q,oBAALC,G;IACQC,W,oBAARC,M;IACMC,S,oBAANC,I;;AAEF,IAAMC,cAAc,WAApB;AACO,SAASxC,SAAT,CAAmByC,UAAnB,EAA+B;AACpCC,SAAOC,MAAP,CAAcrB,OAAd,EAAuBmB,UAAvB;AACD;;AAED,SAASG,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,MAAID,aAAaE,IAAb,IAAqBD,aAAaC,IAAtC,EACE,OAAOF,EAAEG,OAAF,OAAgBF,EAAEE,OAAF,EAAvB;AACF,SAAOH,MAAMC,CAAb;AACD;;IAEKG,S;AACJ,qBAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC;AAAA;;AAC/B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;0BAEKC,Q,EAAU;AACd,UAAMC,OAAO9B,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAb;AACA,UAAI,OAAOH,QAAP,KAAoB,QAAxB,EAAkC;AAChC,YAAIA,YAAYI,OAAhB,EAAyB;AACvBJ,qBAAWI,QAAQJ,QAAR,CAAX;AACD,SAFD,MAEO;AACL,gBAAM,IAAIK,KAAJ,iBAAwBL,QAAxB,gBAAN;AACD;AACF;;AAED;AACA,UAAIA,aAAapC,MAAjB,EAAyB;AAAA;AAAA;AAAA;;AAAA;AACvB,+BAAgBqC,IAAhB,8HAAsB;AAAA,gBAAbK,GAAa;;AACpB,gBAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,oBAAM,CAACA,GAAD,CAAN;AACD;AACD,iBAAKC,KAAL,CAAWA,KAAX,CAAiB,IAAjB,EAAuBD,GAAvB;AACD;AANsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOvB,eAAO,IAAP;AACD;;AAED,UAAIE,WAAWR,SAASO,KAAT,CACb,IADa,EAEb,CACE,KAAKZ,KAAL,YAAsBH,IAAtB,GAA6B,IAAIA,IAAJ,CAAS,KAAKG,KAAL,CAAWF,OAAX,EAAT,CAA7B,GAA8D,KAAKE,KADrE,EAEEc,MAFF,CAESR,IAFT,CAFa,CAAf;;AAOA;AACA,aAAO,OAAOO,QAAP,KAAoB,UAA3B,EAAuC;AACrCA,mBAAWA,SAAS,IAAT,CAAX;AACD;AACD;AACA,UAAIA,aAAa,IAAjB,EAAuB;AACrB,eAAO,IAAP;AACD;;AAED,UAAI,CAACnB,QAAQmB,QAAR,EAAkB,KAAKb,KAAvB,CAAL,EAAoC;AAClC,aAAKA,KAAL,GAAaa,QAAb;AACA,aAAKE,MAAL,CAAY,IAAZ;AACD;AACD,aAAO,IAAP;AACD;;;2BAEMC,Y,EAAc;AACnB;AACA,UAAI,KAAKf,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYc,MAAZ;AACD;;AAED,UAAI,KAAKZ,QAAL,CAAcc,MAAlB,EAA0B;AACxB;AACA,YAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,eAAKA,OAAL,GAAe,IAAf;AACA,eAAKlB,KAAL,GAAamB,MAAM,KAAKnB,KAAX,CAAb;AAFiB;AAAA;AAAA;;AAAA;AAGjB,kCAAc,KAAKG,QAAnB,mIAA6B;AAAA,kBAApBiB,CAAoB;;AAC3B,kBAAIA,EAAEnB,MAAF,KAAa,IAAjB,EAAuB;AACrB,qBAAKD,KAAL,CAAWoB,EAAElB,IAAb,IAAqBkB,EAAEpB,KAAvB;AACD;AACF;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlB,SARD,MAQO,IAAIgB,YAAJ,EAAkB;AACvB,cAAMK,cAAc,EAApB;AADuB;AAAA;AAAA;;AAAA;AAEvB,kCAAc,KAAKlB,QAAnB,mIAA6B;AAAA,kBAApBiB,EAAoB;;AAC3B,kBAAIA,GAAEnB,MAAF,KAAa,IAAb,IAAqBmB,GAAElB,IAAF,IAAU,KAAKF,KAAxC,EAA+C;AAC7CoB,mBAAEpB,KAAF,GAAU,KAAKA,KAAL,CAAWoB,GAAElB,IAAb,CAAV;AACAmB,4BAAYtC,IAAZ,CAAiBqC,EAAjB;AACD,eAHD,MAGO;AACL;AACA,uBAAOA,GAAEnB,MAAT;AACA,uBAAO,KAAKG,QAAL,CAAcgB,GAAElB,IAAhB,CAAP;AACD;AACF;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYvB,eAAKC,QAAL,GAAgBkB,WAAhB;AACD;AACF;;AAED;AACA,UAAI,KAAKpB,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYD,KAAZ,CAAkB,KAAKE,IAAvB,IAA+B,KAAKF,KAApC;AACD;AACF;;;mCAEc;AAAA;;AACb;AACA,WAAKC,MAAL,CAAYE,QAAZ,GAAuB,KAAKF,MAAL,CAAYE,QAAZ,CAAqBmB,MAArB,CAA4B;AAAA,eAAKF,MAAM,KAAX;AAAA,OAA5B,CAAvB;AACA,aAAO,KAAKnB,MAAL,CAAYG,QAAZ,CAAqB,KAAKF,IAA1B,CAAP;AACA,aAAO,KAAKD,MAAZ;AACD;;;0BAEKC,I,EAAM;AACV,UAAIA,QAAQ,KAAKE,QAAjB,EAA2B;AACzB,eAAO,KAAKA,QAAL,CAAcF,IAAd,CAAP;AACD;AACD,UAAMqB,QAAQ,IAAIxB,SAAJ,CAAc,KAAKC,KAAL,CAAWE,IAAX,CAAd,EAAgC,IAAhC,EAAsCA,IAAtC,CAAd;AACA,WAAKC,QAAL,CAAcpB,IAAd,CAAmBwC,KAAnB;AACA,WAAKnB,QAAL,CAAcF,IAAd,IAAsBqB,KAAtB;AACA,aAAOA,KAAP;AACD;;;kCAEarB,I,EAAM;AAClB,aAAO,CAAC5B,MAAMkD,OAAN,CAActB,IAAd,IAAsBA,IAAtB,GAA6BA,KAAKuB,KAAL,CAAWrD,QAAQC,SAAnB,CAA9B,EAA6DqD,MAA7D,CACL,UAACzB,MAAD,EAASC,IAAT;AAAA,eAAkBD,OAAOsB,KAAP,CAAarB,IAAb,CAAlB;AAAA,OADK,EAEL,IAFK,CAAP;AAID;;;gCAEWyB,O,EAASC,e,EAAiB;AACpC,UAAIC,iBAAJ;AACA,UAAIF,OAAJ,EAAa;AACX;AACA,YAAMG,QAAQF,eAAd;AACA;;AAHW,6BAIYD,QAAQF,KAAR,CAAc,GAAd,CAJZ;AAAA;AAAA,YAIFM,GAJE;AAAA,YAIGC,KAJH;;AAKXL,kBAAU,IAAIM,MAAJ,CAAWF,GAAX,EAAgBC,KAAhB,CAAV;AACAH,mBAAW,kBAAS7B,KAAT,EAAgB;AACzB,cAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+B;AAC7B,iBAAK,IAAIkC,GAAT,IAAgBlC,KAAhB,EAAuB;AACrB,kBAAI2B,QAAQQ,IAAR,CAAaD,GAAb,CAAJ,EAAuB;AACrB,uBAAOJ,KAAP;AACD;AACF;AACF;AACD,iBAAOM,SAAP;AACD,SATD;AAUD,OAhBD,MAgBO;AACL,YAAI9D,MAAMkD,OAAN,CAAcI,eAAd,CAAJ,EAAoC;AAClC;AACA;AACA,cAAMS,mBAAmBT,gBAAgB,CAAhB,CAAzB;AACA,cAAME,SAAQF,gBAAgBnD,KAAhB,CAAsB,CAAtB,CAAd;AACAoD,qBAAW,oBAAW;AACpB,gBAAMS,SAASD,iBAAiBzB,KAAjB,CAAuB,IAAvB,EAA6BJ,SAA7B,CAAf;AACA,gBAAI,OAAO8B,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,qBAAOR,OAAMQ,MAAN,CAAP;AACD;AACD,mBAAOA,SAASR,OAAM,CAAN,CAAT,GAAoBM,SAA3B;AACD,WAND;AAOD,SAZD,MAYO;AACL;AACAP,qBAAWD,eAAX;AACD;AACF;;AAED,eAASW,SAAT,CAAmBC,IAAnB,EAAyBvC,MAAzB,EAAiCC,IAAjC,EAAuC;AACrC,YAAI5B,MAAMkD,OAAN,CAAcvB,MAAd,KAAyBwC,cAAcxC,MAAd,CAA7B,EAAoD;AAAA;AAAA;AAAA;;AAAA;AAClD,kCAAiBT,OAAOkD,OAAP,CAAezC,MAAf,CAAjB,mIAAyC;AAAA,kBAAhC0C,IAAgC;;AACvC,kBAAM3C,QAAQ2C,KAAK,CAAL,CAAd;AACA,kBAAMT,MAAMS,KAAK,CAAL,CAAZ;AACA,kBAAMC,YAAY1C,KAAKY,MAAL,CAAYoB,GAAZ,CAAlB;AACA,kBAAMJ,UAAQD,SAAS7B,KAAT,EAAgBkC,GAAhB,CAAd;AACA,kBAAIJ,OAAJ,EAAW;AACT;AACA,oBAAMe,OAAOL,KAAKM,aAAL,CAAmBF,SAAnB,CAAb;AACAG,4BAAYF,IAAZ,EAAkBf,OAAlB;AACD;AACDS,wBAAUC,IAAV,EAAgBxC,KAAhB,EAAuB4C,SAAvB;AACD;AAZiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAanD;AACF;;AAEDL,gBAAU,IAAV,EAAgB,KAAKvC,KAArB,EAA4B,EAA5B;AACD;;;;;;AAGI,SAASjD,OAAT,CAAiBiG,OAAjB,EAA0B;AAC/B,MAAMC,QAAQzE,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAd;AACA,MAAI,CAACyC,MAAMhC,MAAX,EAAmB;AACjB,WAAO,CAAC+B,OAAR;AACD;AACD,MAAMnC,WAAWM,MAAM6B,OAAN,CAAjB;AAL+B;AAAA;AAAA;;AAAA;AAM/B,0BAAiBC,KAAjB,mIAAwB;AAAA,UAAfC,IAAe;;AACtBrC,eAASqC,IAAT,IAAiB,CAACrC,SAASqC,IAAT,CAAlB;AACD;AAR8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS/B,SAAOrC,QAAP;AACD;;AAEM,SAAS7D,MAAT,CAAgBgG,OAAhB,EAAyB;AAC9B,MAAMC,QAAQzE,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAd;AACA;AACA,MAAI,CAACyC,MAAMhC,MAAX,EAAmB;AACjB,WAAO,UAAS4B,IAAT,EAAe;AACpB,UAAM5C,SAAS4C,KAAK5C,MAApB;AACA,UAAI,CAACA,MAAL,EAAa;AACX,eAAO+C,OAAP;AACD;;AAED,UAAIH,KAAK3C,IAAL,IAAaD,OAAOD,KAAxB,EAA+B;AAC7B,YAAI,CAACC,OAAOiB,OAAZ,EAAqB;AACnBjB,iBAAOD,KAAP,GAAemB,MAAMlB,OAAOD,KAAb,CAAf;AACD;AACD,YAAI1B,MAAMkD,OAAN,CAAcvB,OAAOD,KAArB,CAAJ,EAAiC;AAC/BC,iBAAOD,KAAP,CAAab,MAAb,CAAoB0D,KAAK3C,IAAzB,EAA+B,CAA/B;AACD,SAFD,MAEO;AACL,iBAAOD,OAAOD,KAAP,CAAa6C,KAAK3C,IAAlB,CAAP;AACD;AACD,eAAO2C,KAAK5C,MAAZ;AACAA,eAAOc,MAAP,CAAc,IAAd;AACD,OAXD,MAWO;AACL;AACD;AACF,KApBD;AAqBD;;AAED,MAAI,CAACiC,OAAL,EAAc;AACd,MAAInC,WAAWmC,OAAf;AACAC,QAAME,OAAN,CAAc,gBAAQ;AACpB,QAAID,QAAQrC,QAAZ,EAAsB;AACpB,UAAIA,aAAamC,OAAjB,EAA0B;AACxBnC,mBAAWM,MAAM6B,OAAN,CAAX;AACD;AACD,aAAOnC,SAASqC,IAAT,CAAP;AACD;AACF,GAPD;;AASA,SAAOrC,QAAP;AACD;;AAED,SAASuC,OAAT,CAAiBC,KAAjB,EAAwBhD,QAAxB,EAAkC;AAChC,MAAI,CAACgD,KAAL,EAAY;AACVA,YAAQ,EAAR;AACD,GAFD,MAEO;AACLA,YAAQA,MAAM5E,KAAN,EAAR;AACD;AACD4B,WAASgD,KAAT;AACA,SAAOA,KAAP;AACD;;AAEM,SAASpG,OAAT,CAAiBoG,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAMC,WAAWhF,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAjB;AACA,MAAIgD,SAASvC,MAAT,IAAmBsC,KAAvB,EAA8B;AAC5B,WAAOH,QAAQC,KAAR,EAAe;AAAA,aACpBnE,YAAY0B,KAAZ,CAAkBQ,CAAlB,EAAqB,CAACkC,KAAD,EAAQC,KAAR,EAAezC,MAAf,CAAsB0C,QAAtB,CAArB,CADoB;AAAA,KAAf,CAAP;AAGD;AACD,SAAOH,KAAP;AACD;;AAEM,SAASnG,SAAT,CAAmBmG,KAAnB,EAA0B;AAC/B,MAAMI,UAAUjF,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAhB;AACA,MAAIkD,WAAWL,KAAf;AACA;AACAI,UAAQpE,IAAR;AACA,SAAOoE,QAAQxC,MAAf,EAAuB;AACrB,QAAMqC,QAAQG,QAAQxE,GAAR,EAAd;AACA,QAAIqE,SAAS,CAAT,IAAcA,QAAQI,SAASzC,MAAnC,EAA2C;AACzC,UAAIyC,aAAaL,KAAjB,EAAwB;AACtBK,mBAAWA,SAASjF,KAAT,EAAX;AACD;AACDiF,eAASvE,MAAT,CAAgBmE,KAAhB,EAAuB,CAAvB;AACD;AACF;;AAED,SAAOI,QAAP;AACD;;AAEM,SAASvG,KAAT,CAAekG,KAAf,EAAsB;AAC3B,MAAMG,WAAWhF,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAjB;AACA,MAAIgD,SAASvC,MAAb,EAAqB;AACnB,WAAOmC,QAAQC,KAAR,EAAe;AAAA,aAAKvE,UAAU8B,KAAV,CAAgBQ,CAAhB,EAAmBoC,QAAnB,CAAL;AAAA,KAAf,CAAP;AACD;AACD,SAAOH,KAAP;AACD;;AAEM,SAASjG,OAAT,CAAiBiG,KAAjB,EAAwB/B,MAAxB,EAAgC;AACrC,MAAMoC,WAAWL,MAAM/B,MAAN,CAAaA,MAAb,CAAjB;AACA,MAAIoC,SAASzC,MAAT,KAAoBoC,MAAMpC,MAA9B,EAAsC,OAAOyC,QAAP;AACtC,SAAOL,KAAP;AACD;;AAEM,SAAShG,QAAT,CAAkBgG,KAAlB,EAAyB;AAC9B,MAAMG,WAAWhF,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAjB;AACA,MAAIgD,SAASvC,MAAb,EAAqB;AACnB,WAAOmC,QAAQC,KAAR,EAAe;AAAA,aAAKzE,aAAagC,KAAb,CAAmBQ,CAAnB,EAAsBoC,QAAtB,CAAL;AAAA,KAAf,CAAP;AACD;AACD,SAAOH,KAAP;AACD;;AAEM,SAAS/F,IAAT,CAAc+F,KAAd,EAAqB;AAC1B,MAAI,CAACA,KAAD,IAAUA,MAAMpC,MAApB,EAA4B;AAC1B,WAAOmC,QAAQC,KAAR,EAAe;AAAA,aAAKjC,EAAEnC,GAAF,EAAL;AAAA,KAAf,CAAP;AACD;AACD,SAAOoE,KAAP;AACD;;AAEM,SAAS9F,MAAT,CAAgB8F,KAAhB,EAAuB;AAC5B,MAAI,CAACA,KAAD,IAAUA,MAAMpC,MAApB,EAA4B;AAC1B,WAAOmC,QAAQC,KAAR,EAAe;AAAA,aAAKjC,EAAEzC,KAAF,EAAL;AAAA,KAAf,CAAP;AACD;AACD,SAAO0E,KAAP;AACD;;AAEM,SAAS7F,KAAT,CAAe6F,KAAf,EAAsBM,MAAtB,EAA8B;AACnC,SAAOP,QAAQC,KAAR,EAAe;AAAA,WAAKjC,EAAE/B,IAAF,CAAOsE,MAAP,CAAL;AAAA,GAAf,CAAP;AACD;;AAED,SAASxC,KAAT,CAAenB,KAAf,EAAsB;AACpB,MAAI1B,MAAMkD,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;AACxB,WAAO,GAAGc,MAAH,CAAUd,KAAV,CAAP;AACD;AACD,MAAIA,UAAU,IAAV,IAAkBA,UAAUoC,SAA5B,IAAyCK,cAAczC,KAAd,CAA7C,EAAmE;AACjE,QAAM4D,YAAY,EAAlB;AACA,SAAK,IAAIV,IAAT,IAAiBlD,KAAjB,EAAwB;AACtB4D,gBAAUV,IAAV,IAAkBlD,MAAMkD,IAAN,CAAlB;AACD;AACD,WAAOU,SAAP;AACD;AACD,SAAO5D,KAAP;AACD;;AAED,IAAMyC,gBAAgB,SAAhBA,aAAgB;AAAA,SACpB,CAAC,CAACoB,GAAF,IAAS,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAxB,IAAoCA,IAAIC,WAAJ,KAAoBtE,MADpC;AAAA,CAAtB;;AAGO,SAAS/B,OAAT,CAAiB4F,KAAjB,EAAwB;AAC7B,MAAMU,QAAQvF,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAd;AACA,MAAMkD,WAAWL,MAAM/B,MAAN,CAAa;AAAA,WAAKyC,MAAMC,OAAN,CAAc5C,CAAd,MAAqB,CAAC,CAA3B;AAAA,GAAb,CAAjB;AACA,SAAOsC,SAASzC,MAAT,KAAoBoC,MAAMpC,MAA1B,GAAmCoC,KAAnC,GAA2CK,QAAlD;AACD;;AAEM,SAAShG,KAAT,CAAesF,OAAf,EAAwBiB,IAAxB,EAA8BC,EAA9B,EAAkC;AACvC,MAAMrD,WAAWM,MAAM6B,OAAN,CAAjB;AACA,MAAMmB,OAAOtD,SAASoD,IAAT,CAAb;AACApD,WAASoD,IAAT,IAAiBpD,SAASqD,EAAT,CAAjB;AACArD,WAASqD,EAAT,IAAeC,IAAf;AACA,SAAOtD,QAAP;AACD;;AAEM,SAASlD,OAAT,CAAiByG,GAAjB,EAAsB;AAC3B,MAAMC,SAAS7F,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAf;AACA,MAAI6D,OAAOpD,MAAX,EAAmB;AACjB,QAAIqD,YAAYF,GAAhB;AACAC,WAAOlB,OAAP,CAAe,iBAAS;AACtB,UAAInD,UAAU,IAAV,IAAkBA,UAAUoC,SAAhC,EAA2C;AAC3C,WAAK,IAAIF,GAAT,IAAgBlC,KAAhB,EAAuB;AACrB,YAAIA,MAAMkC,GAAN,MAAeoC,UAAUpC,GAAV,CAAnB,EAAmC;AACjC,cAAIoC,cAAcF,GAAlB,EAAuB;AACrB;AACAE,wBAAY,EAAZ;AACA,iBAAK,IAAIpB,IAAT,IAAiBkB,GAAjB,EAAsB;AACpBE,wBAAUpB,IAAV,IAAkBkB,IAAIlB,IAAJ,CAAlB;AACD;AACF;AACDoB,oBAAUpC,GAAV,IAAiBlC,MAAMkC,GAAN,CAAjB;AACD;AACF;AACF,KAdD;AAeA,WAAOoC,SAAP;AACD;;AAED,SAAOF,GAAP;AACD;;AAED,SAASG,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAMC,QAAQ,IAAIC,KAAJ,CAAU;AAAA,WAAKtC,SAAL;AAAA,GAAV,EAA0B;AACtCuC,OADsC,eAClCC,MADkC,EAC1B1B,IAD0B,EACpB;AAChB,UAAIA,SAAS5D,WAAb,EAA0B,OAAOkF,OAAP;AAC1BA,gBAAUA,QAAQjD,KAAR,CAAc2B,IAAd,CAAV;AACA,aAAOuB,KAAP;AACD,KALqC;AAMtCI,OANsC,eAMlCD,MANkC,EAM1B1B,IAN0B,EAMpBlD,KANoB,EAMb;AACvBwE,cAAQ5D,KAAR,CAAc5C,IAAd,EAAoBkF,IAApB,EAA0BlD,KAA1B;AACA,aAAOyE,KAAP;AACD,KATqC;AAUtC7D,SAVsC,iBAUhCgE,MAVgC,EAUxBE,OAVwB,EAUfxE,IAVe,EAUT;AAC3B,UAAMyE,SAASP,QAAQtE,IAAvB;AACA;AACAsE,gBAAUA,QAAQQ,YAAR,EAAV;AACAR,cAAQ5D,KAAR,CAAcA,KAAd,CAAoB4D,OAApB,EAA6B,CAACO,MAAD,EAASjE,MAAT,CAAgBR,IAAhB,CAA7B;AACA,aAAOmE,KAAP;AACD;AAhBqC,GAA1B,CAAd;AAkBA,SAAOA,KAAP;AACD;;AAEM,SAAS7G,IAAT,CAAcoC,KAAd,EAAqB;AAC1B,SAAO,UAAS6C,IAAT,EAAe;AACpB,QAAI7C,KAAJ,EAAW;AACT+C,kBAAYF,IAAZ,EAAkB7C,KAAlB;AACD;AACD,WAAO6C,IAAP;AACD,GALD;AAMD;;AAEM,SAAShF,GAAT,CAAamF,OAAb,EAAsBiC,SAAtB,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqD;AAC1D,SAAOvH,KAAKqH,UAAUjC,OAAV,IAAqBkC,QAArB,GAAgCC,QAArC,CAAP;AACD;;AAEM,SAASrH,OAAT,CAAiBkF,OAAjB,EAA0BoC,UAA1B,EAAkD;AAAA,MAAZtD,KAAY,uEAAJ,EAAI;;AACvD,MAAI,EAAE,OAAOsD,UAAP,KAAsB,UAAxB,CAAJ,EAAyC;AACvCtD,YAAQsD,UAAR;AACAA,iBAAa,IAAb;AACD;AACD,SAAOxH,KACLkE,MAAM,OAAOsD,UAAP,KAAsB,UAAtB,GAAmCA,WAAWpC,OAAX,CAAnC,GAAyDA,OAA/D,KACElB,MAAMuD,OAFH,CAAP;AAID;;AAEM,SAAStH,OAAT,CAAiBiF,OAAjB,EAA0BiC,SAA1B,EAAqCjF,KAArC,EAA4C;AACjD,SAAOpC,KAAKqH,UAAUjC,OAAV,IAAqBZ,SAArB,GAAiCpC,KAAtC,CAAP;AACD;;AAEM,SAAShC,IAAT,CAAcgF,OAAd,EAAuB;AAC5B,MAAM1C,OAAO9B,WAAW+B,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAb;AACA,MAAIF,KAAKW,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAOX,KAAK,CAAL,CAAP;AACD;AACD;AACA,MAAM4C,OAAO5C,KAAK,CAAL,CAAb;AACA,MAAMN,QAAQM,KAAK,CAAL,CAAd;AACA,MAAI0C,QAAQE,IAAR,MAAkBlD,KAAtB,EAA6B,OAAOgD,OAAP;AAC7B,MAAMnC,WAAWM,MAAM6B,OAAN,CAAjB;AACAnC,WAASqC,IAAT,IAAiBlD,KAAjB;AACA,SAAOa,QAAP;AACD;;AAED,SAASkC,WAAT,CAAqBxB,KAArB,EAA4BvB,KAA5B,EAAmC;AACjC;AACA,MAAI,OAAOA,MAAM,CAAN,CAAP,KAAoB,UAApB,IAAkC,OAAOA,MAAM,CAAN,CAAP,KAAoB,QAA1D,EAAoE;AAClE;AACAuB,UAAMX,KAAN,CAAYA,KAAZ,CAAkBW,KAAlB,EAAyBvB,KAAzB;AACD,GAHD,MAGO;AACLsF,mBAAe/D,KAAf,EAAsBvB,KAAtB;AACD;AACF;;AAED,SAASsF,cAAT,CAAwB/D,KAAxB,EAA+BvB,KAA/B,EAAsC;AACpC;AACA,MAAMpC,OAAOoC,MAAM,CAAN,CAAb;AACA,MAAI1B,MAAMkD,OAAN,CAAc5D,IAAd,CAAJ,EAAyB;AACvB,QAAM0D,SAAStB,MAAM,CAAN,CAAf;AACA,QAAMuF,QAAQvF,MAAM,CAAN,CAAd;AACA,QAAIwF,UAAU,CAAd;AACA;AAJuB;AAAA;AAAA;;AAAA;AAKvB,4BAAgBhG,OAAOiG,IAAP,CAAYlE,MAAMvB,KAAlB,CAAhB,mIAA0C;AAAA,YAAjCkC,GAAiC;;AACxC;AACA,YAAIZ,UAAU,CAACA,OAAOC,MAAMvB,KAAN,CAAYkC,GAAZ,CAAP,EAAyBA,GAAzB,CAAf,EAA8C;AAC5C;AACD;AACD,YAAMwD,WAAWnE,MAAMA,KAAN,CAAYW,GAAZ,CAAjB;AACAwD,iBAAS9E,KAAT,CAAeA,KAAf,CAAqB8E,QAArB,EAA+B9H,IAA/B;AACA4H;AACA,YAAID,SAASC,WAAWD,KAAxB,EAA+B;AAC7B;AACD;AACF;AAhBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBxB,GAjBD,MAiBO;AACL,SAAK,IAAIrD,IAAT,IAAgBX,MAAMvB,KAAtB,EAA6B;AAC3BuC,gBAAUhB,MAAMA,KAAN,CAAYW,IAAZ,CAAV,EAA4BtE,IAA5B;AACD;AACF;AACF;;AAED,SAAS2E,SAAT,CAAmBtC,MAAnB,EAA2B4C,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,0BAAiBrD,OAAOkD,OAAP,CAAeG,IAAf,CAAjB,mIAAuC;AAAA,UAA9BF,IAA8B;;AACrC,UAAMT,MAAMS,KAAK,CAAL,CAAZ;AACA,UAAI3C,QAAQ2C,KAAK,CAAL,CAAZ;AACA,UAAIT,IAAIyD,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACzB;AACA1F,eAAO2F,WAAP,CAAmB1D,IAAI2D,MAAJ,CAAW,CAAX,CAAnB,EAAkC7F,KAAlC;AACA;AACD;AACD;AACA,UAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/BA,gBAAQ,CAACA,KAAD,CAAR;AACD;AACD,UAAMuB,QAAQtB,OAAO6C,aAAP,CAAqBZ,GAArB,CAAd;AACA,UAAI5D,MAAMkD,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;AACxB+C,oBAAYxB,KAAZ,EAAmBvB,KAAnB;AACD,OAFD,MAEO,IAAIyC,cAAczC,KAAd,CAAJ,EAA0B;AAC/BuC,kBAAUhB,KAAV,EAAiBvB,KAAjB;AACD,OAFM,MAEA;AACLuB,cAAMX,KAAN,CAAY5C,IAAZ,EAAkBgC,KAAlB;AACD;AACF;AArB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBhC;;AAED;AACO,SAAS/B,MAAT,GAAkB;AACvB;AACD;;AAEM,IAAM6H,0BAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACxC,MAAMxD,OAAO,IAAIzC,SAAJ,CAAcgG,KAAd,CAAb;;AAEA,MAAIzH,MAAMkD,OAAN,CAAcwE,OAAd,CAAJ,EAA4B;AAC1BjD,gBAAYP,IAAZ,EAAkBwD,OAAlB;AACD,GAFD,MAEO;AACLzD,cAAUC,IAAV,EAAgBwD,OAAhB;AACD;;AAED,SAAOxD,KAAKxC,KAAZ;AACD,CAVM;;AAYA,SAAS9B,UAAT,CAAoB6H,KAApB,EAAqC;AAC1C,MAAMvD,OAAO,IAAIzC,SAAJ,CAAcgG,KAAd,CAAb;;AAD0C,oCAAPjE,KAAO;AAAPA,SAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAG1C,0BAAiBA,KAAjB,mIAAwB;AAAA,UAAflE,KAAe;;AACtB,UAAI,OAAOA,KAAP,KAAgB,UAApB,EAAgC;AAC9BA,gBAAO,CAACA,KAAD,CAAP;AACD;AACD,UAAMqI,WAAWrI,MAAK,CAAL,CAAjB;AACA,UAAM0C,OAAO1C,MAAKa,KAAL,CAAW,CAAX,CAAb;AACA,UAAMoE,OAAOoD,SAAS1B,oBAAoB/B,IAApB,CAAT,EAAoClD,WAApC,CAAb;AACA,UAAIgB,KAAKW,MAAT,EAAiB;AACf4B,aAAKjC,KAAL,CAAWA,KAAX,CAAiBiC,IAAjB,EAAuBvC,IAAvB;AACD;AACF;AAbyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe1C,SAAOkC,KAAKxC,KAAZ;AACD;;kBAEc8F,M;AAER,IAAMrF,4BAAU;AACrBxC,gBADqB;AAErBiI,SAAOjI,MAFc;AAGrB,OAAKD,IAHgB;AAIrBL,kBAJqB;AAKrB8B,UAAQ9B,OALa;AAMrBL,YANqB;AAOrB2B,OAAK3B,IAPgB;AAQrBH,cARqB;AASrB4B,QAAM5B,KATe;AAUrBM,kBAVqB;AAWrB0I,UAAQ1I,OAXa;AAYrBO,YAZqB;AAarB6G,OAAK7G,IAbgB;AAcrBT,gBAdqB;AAerBoB,SAAOpB,MAfc;AAgBrBC,cAhBqB;AAiBrB6B,QAAM7B,KAjBe;AAkBrBP,kBAlBqB;AAmBrBkC,UAAQlC,OAnBa;AAoBrBF,kBApBqB;AAqBrBqJ,UAAQrJ,OArBa;AAsBrBC,gBAtBqB;AAuBrBqJ,SAAOrJ,MAvBc;AAwBrBK,oBAxBqB;AAyBrBwB,WAASxB,QAzBY;AA0BrBK,cA1BqB;AA2BrB4I,QAAM5I,KA3Be;AA4BrBR,sBA5BqB;AA6BrBqJ,YAAUrJ,SA7BW;AA8BrBsJ,MAAI3I,GA9BiB;AA+BrBA,UA/BqB;AAgCrBE,kBAhCqB;AAiCrB0I,UAAQ1I,OAjCa;AAkCrBD,kBAlCqB;AAmCrB4I,UAAQ5I,OAnCa;AAoCrBV,kBApCqB;AAqCrBkE,UAAQlE;AArCa,CAAhB;;AAwCP,SAASuJ,eAAT,CAAyB9E,QAAzB,EAAmC;AACjC,SAAO,YAAW;AAChBrB,cAAU,CAAV,IAAeW,MAAMX,UAAU,CAAV,CAAN,CAAf;AACA,WAAOqB,SAASjB,KAAT,CAAe,IAAf,EAAqBJ,SAArB,CAAP;AACD,GAHD;AAID;;AAEM,SAASrC,MAAT,CAAgByI,IAAhB,EAAsB7B,MAAtB,EAA8B8B,gBAA9B,EAAgD;AACrD;AACA,MAAIpE,cAAcmE,IAAd,CAAJ,EAAyB;AACvBC,uBAAmB9B,MAAnB;AADuB;AAAA;AAAA;;AAAA;AAEvB,4BAAiBvF,OAAOkD,OAAP,CAAekE,IAAf,CAAjB,mIAAuC;AAAA,YAA9BjE,IAA8B;;AACrClC,gBAAQkC,KAAKT,GAAb,IAAoB2E,mBAChBlE,KAAK3C,KADW,GAEhB2G,gBAAgBhE,KAAK3C,KAArB,CAFJ;AAGD;AANsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOxB,GAPD,MAOO;AACL;AACAS,YAAQmG,IAAR,IAAgBC,mBAAmB9B,MAAnB,GAA4B4B,gBAAgB5B,MAAhB,CAA5C;AACD;AACF","file":"index.js","sourcesContent":["const configs = {\r\n  // for fast performance, we process dot as separator only\r\n  separator: \".\"\r\n};\r\n\r\nconst {\r\n  slice: arraySlice,\r\n  shift: arrayShift,\r\n  unshift: arrayUnshift,\r\n  push: arrayPush,\r\n  pop: arrayPop,\r\n  splice: arraySplice,\r\n  sort: arraySort\r\n} = Array.prototype;\r\nconst contextProp = \"@@context\";\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nfunction isEqual(a, b) {\r\n  if (a instanceof Date && b instanceof Date)\r\n    return a.getTime() === b.getTime();\r\n  return a === b;\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier) {\r\n    const args = arraySlice.call(arguments, 1);\r\n    if (typeof modifier === \"string\") {\r\n      if (modifier in actions) {\r\n        modifier = actions[modifier];\r\n      } else {\r\n        throw new Error(`No action '${modifier}'' defined`);\r\n      }\r\n    }\r\n\r\n    // is batch processing\r\n    if (modifier === $batch) {\r\n      for (let job of args) {\r\n        if (typeof job === \"function\") {\r\n          job = [job];\r\n        }\r\n        this.apply.apply(this, job);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    let newValue = modifier.apply(\r\n      null,\r\n      [\r\n        this.value instanceof Date ? new Date(this.value.getTime()) : this.value\r\n      ].concat(args)\r\n    );\r\n\r\n    // need special context\r\n    while (typeof newValue === \"function\") {\r\n      newValue = newValue(this);\r\n    }\r\n    // nothing to change\r\n    if (newValue === this) {\r\n      return this;\r\n    }\r\n\r\n    if (!isEqual(newValue, this.value)) {\r\n      this.value = newValue;\r\n      this.change(true);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change(valueUpdated) {\r\n    // notify to parent that child value is changed\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n\r\n    if (this.children.length) {\r\n      // if this is parent, we must clone its value\r\n      if (!this.changed) {\r\n        this.changed = true;\r\n        this.value = clone(this.value);\r\n        for (let x of this.children) {\r\n          if (x.parent === this) {\r\n            this.value[x.path] = x.value;\r\n          }\r\n        }\r\n      } else if (valueUpdated) {\r\n        const newChildren = [];\r\n        for (let x of this.children) {\r\n          if (x.parent === this && x.path in this.value) {\r\n            x.value = this.value[x.path];\r\n            newChildren.push(x);\r\n          } else {\r\n            // child is removed, so we detach the child\r\n            delete x.parent;\r\n            delete this.childMap[x.path];\r\n          }\r\n        }\r\n        this.children = newChildren;\r\n      }\r\n    }\r\n\r\n    // update parent model\r\n    if (this.parent) {\r\n      this.parent.value[this.path] = this.value;\r\n    }\r\n  }\r\n\r\n  backToParent() {\r\n    // make sure child should be removed fron its parent\r\n    this.parent.children = this.parent.children.filter(x => x !== this);\r\n    delete this.parent.childMap[this.path];\r\n    return this.parent;\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return (Array.isArray(path) ? path : path.split(configs.separator)).reduce(\r\n      (parent, path) => parent.child(path),\r\n      this\r\n    );\r\n  }\r\n\r\n  descendants(pattern, specsOrCallback) {\r\n    let callback;\r\n    if (pattern) {\r\n      // match node by pattern and data must be specs\r\n      const specs = specsOrCallback;\r\n      // convert pattern to regex\r\n      const [, exp, flags] = pattern.split(\"/\");\r\n      pattern = new RegExp(exp, flags);\r\n      callback = function(value) {\r\n        if (typeof value === \"object\") {\r\n          for (let key in value) {\r\n            if (pattern.test(key)) {\r\n              return specs;\r\n            }\r\n          }\r\n        }\r\n        return undefined;\r\n      };\r\n    } else {\r\n      if (Array.isArray(specsOrCallback)) {\r\n        // [match, ...specs]\r\n        // callback can return false to skip checking node or return spec index\r\n        const originalCallback = specsOrCallback[0];\r\n        const specs = specsOrCallback.slice(1);\r\n        callback = function() {\r\n          const result = originalCallback.apply(null, arguments);\r\n          if (typeof result === \"number\") {\r\n            return specs[result];\r\n          }\r\n          return result ? specs[0] : undefined;\r\n        };\r\n      } else {\r\n        // data must be callback func, it will be called when visit node\r\n        callback = specsOrCallback;\r\n      }\r\n    }\r\n\r\n    function traversal(root, parent, path) {\r\n      if (Array.isArray(parent) || isPlainObject(parent)) {\r\n        for (let pair of Object.entries(parent)) {\r\n          const value = pair[1];\r\n          const key = pair[0];\r\n          const childPath = path.concat(key);\r\n          const specs = callback(value, key);\r\n          if (specs) {\r\n            // create node from path\r\n            const node = root.childFromPath(childPath);\r\n            processSpec(node, specs);\r\n          }\r\n          traversal(root, value, childPath);\r\n        }\r\n      }\r\n    }\r\n\r\n    traversal(this, this.value, []);\r\n  }\r\n}\r\n\r\nexport function $toggle(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  for (let prop of props) {\r\n    newValue[prop] = !newValue[prop];\r\n  }\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  // no prop to unset => unset its self\r\n  if (!props.length) {\r\n    return function(node) {\r\n      const parent = node.parent;\r\n      if (!parent) {\r\n        return current;\r\n      }\r\n\r\n      if (node.path in parent.value) {\r\n        if (!parent.changed) {\r\n          parent.value = clone(parent.value);\r\n        }\r\n        if (Array.isArray(parent.value)) {\r\n          parent.value.splice(node.path, 1);\r\n        } else {\r\n          delete parent.value[node.path];\r\n        }\r\n        delete node.parent;\r\n        parent.change(true);\r\n      } else {\r\n        // not exist in parent value\r\n      }\r\n    };\r\n  }\r\n\r\n  if (!current) return;\r\n  let newValue = current;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, modifier) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  modifier(array);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count) {\r\n  const newItems = arraySlice.call(arguments, 3);\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, x =>\r\n      arraySplice.apply(x, [index, count].concat(newItems))\r\n    );\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $removeAt(array) {\r\n  const indexes = arraySlice.call(arguments, 1);\r\n  let newArray = array;\r\n  // remove from bottom to top\r\n  indexes.sort();\r\n  while (indexes.length) {\r\n    const index = indexes.pop();\r\n    if (index >= 0 && index < newArray.length) {\r\n      if (newArray === array) {\r\n        newArray = newArray.slice();\r\n      }\r\n      newArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  return newArray;\r\n}\r\n\r\nexport function $push(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayPush.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $filter(array, filter) {\r\n  const newArray = array.filter(filter);\r\n  if (newArray.length !== array.length) return newArray;\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayUnshift.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.pop());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.shift());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, x => x.sort(sorter));\r\n}\r\n\r\nfunction clone(value) {\r\n  if (Array.isArray(value)) {\r\n    return [].concat(value);\r\n  }\r\n  if (value === null || value === undefined || isPlainObject(value)) {\r\n    const newObject = {};\r\n    for (let prop in value) {\r\n      newObject[prop] = value[prop];\r\n    }\r\n    return newObject;\r\n  }\r\n  return value;\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nexport function $remove(array) {\r\n  const items = arraySlice.call(arguments, 1);\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $assign(obj) {\r\n  const values = arraySlice.call(arguments, 1);\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            // clone before updating\r\n            mergedObj = {};\r\n            for (let prop in obj) {\r\n              mergedObj[prop] = obj[prop];\r\n            }\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction createSelectorProxy(context) {\r\n  const proxy = new Proxy(x => undefined, {\r\n    get(target, prop) {\r\n      if (prop === contextProp) return context;\r\n      context = context.child(prop);\r\n      return proxy;\r\n    },\r\n    set(target, prop, value) {\r\n      context.apply($set, prop, value);\r\n      return proxy;\r\n    },\r\n    apply(target, thisArg, args) {\r\n      const action = context.path;\r\n      // back to parent node\r\n      context = context.backToParent();\r\n      context.apply.apply(context, [action].concat(args));\r\n      return proxy;\r\n    }\r\n  });\r\n  return proxy;\r\n}\r\n\r\nexport function spec(value) {\r\n  return function(node) {\r\n    if (value) {\r\n      processSpec(node, value);\r\n    }\r\n    return node;\r\n  };\r\n}\r\n\r\nexport function $if(current, condition, thenSpec, elseSpec) {\r\n  return spec(condition(current) ? thenSpec : elseSpec);\r\n}\r\n\r\nexport function $switch(current, makeChoice, specs = {}) {\r\n  if (!(typeof makeChoice === \"function\")) {\r\n    specs = makeChoice;\r\n    makeChoice = null;\r\n  }\r\n  return spec(\r\n    specs[typeof makeChoice === \"function\" ? makeChoice(current) : current] ||\r\n      specs.default\r\n  );\r\n}\r\n\r\nexport function $unless(current, condition, value) {\r\n  return spec(condition(current) ? undefined : value);\r\n}\r\n\r\nexport function $set(current) {\r\n  const args = arraySlice.call(arguments, 1);\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  // don't use destructing to improve performance\r\n  const prop = args[0];\r\n  const value = args[1];\r\n  if (current[prop] === value) return current;\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nfunction processSpec(child, value) {\r\n  // is main spec\r\n  if (typeof value[0] === \"function\" || typeof value[0] === \"string\") {\r\n    // is modifier and its args\r\n    child.apply.apply(child, value);\r\n  } else {\r\n    processSubSpec(child, value);\r\n  }\r\n}\r\n\r\nfunction processSubSpec(child, value) {\r\n  // is sub spec\r\n  const spec = value[0];\r\n  if (Array.isArray(spec)) {\r\n    const filter = value[1];\r\n    const limit = value[2];\r\n    let applied = 0;\r\n    // apply for each child\r\n    for (let key of Object.keys(child.value)) {\r\n      // only apply spec for child which is satisfied filter\r\n      if (filter && !filter(child.value[key], key)) {\r\n        continue;\r\n      }\r\n      const newChild = child.child(key);\r\n      newChild.apply.apply(newChild, spec);\r\n      applied++;\r\n      if (limit && applied >= limit) {\r\n        break;\r\n      }\r\n    }\r\n  } else {\r\n    for (let key in child.value) {\r\n      traversal(child.child(key), spec);\r\n    }\r\n  }\r\n}\r\n\r\nfunction traversal(parent, node) {\r\n  for (let pair of Object.entries(node)) {\r\n    const key = pair[0];\r\n    let value = pair[1];\r\n    if (key.charAt(0) === \"?\") {\r\n      // is wildcard\r\n      parent.descendants(key.substr(1), value);\r\n      continue;\r\n    }\r\n    // convert obj method to custom modifier\r\n    if (typeof value === \"function\") {\r\n      value = [value];\r\n    }\r\n    const child = parent.childFromPath(key);\r\n    if (Array.isArray(value)) {\r\n      processSpec(child, value);\r\n    } else if (isPlainObject(value)) {\r\n      traversal(child, value);\r\n    } else {\r\n      child.apply($set, value);\r\n    }\r\n  }\r\n}\r\n\r\n// a token to determine batch actions\r\nexport function $batch() {\r\n  // do nothing\r\n}\r\n\r\nexport const update = (state, changes) => {\r\n  const root = new Immutable(state);\r\n\r\n  if (Array.isArray(changes)) {\r\n    processSpec(root, changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n};\r\n\r\nexport function updatePath(state, ...specs) {\r\n  const root = new Immutable(state);\r\n\r\n  for (let spec of specs) {\r\n    if (typeof spec === \"function\") {\r\n      spec = [spec];\r\n    }\r\n    const selector = spec[0];\r\n    const args = spec.slice(1);\r\n    const node = selector(createSelectorProxy(root))[contextProp];\r\n    if (args.length) {\r\n      node.apply.apply(node, args);\r\n    }\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport default update;\r\n\r\nexport const actions = {\r\n  $batch,\r\n  batch: $batch,\r\n  \"=\": $set,\r\n  $assign,\r\n  assign: $assign,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap,\r\n  $removeAt,\r\n  removeAt: $removeAt,\r\n  if: $if,\r\n  $if,\r\n  $unless,\r\n  unless: $unless,\r\n  $switch,\r\n  switch: $switch,\r\n  $filter,\r\n  filter: $filter\r\n};\r\n\r\nfunction cloneIfPossible(callback) {\r\n  return function() {\r\n    arguments[0] = clone(arguments[0]);\r\n    return callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nexport function define(name, action, disableAutoClone) {\r\n  // define(actionHash, disableAutoClone)\r\n  if (isPlainObject(name)) {\r\n    disableAutoClone = action;\r\n    for (let pair of Object.entries(name)) {\r\n      actions[pair.key] = disableAutoClone\r\n        ? pair.value\r\n        : cloneIfPossible(pair.value);\r\n    }\r\n  } else {\r\n    // define(name, action, disableAutoClone)\r\n    actions[name] = disableAutoClone ? action : cloneIfPossible(action);\r\n  }\r\n}\r\n"]}