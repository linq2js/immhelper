{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$map","$removeAt","$push","$filter","$unshift","$pop","$shift","$sort","$remove","$swap","$assign","spec","$if","$switch","$unless","$set","$batch","updatePath","define","createModifier","defaultOf","configs","separator","defaultValuePrefix","Array","prototype","arraySlice","slice","arrayShift","shift","arrayUnshift","unshift","arrayPush","push","arrayPop","pop","arraySplice","splice","arraySort","sort","pathCache","contextProp","newConfigs","Object","assign","isEqual","a","b","Date","getTime","Immutable","value","parent","path","children","childMap","modifier","args","call","arguments","actions","Error","job","isPlainObject","traversal","apply","newValue","concat","change","valueUpdated","length","changed","clone","x","filter","defaultFactory","isExisting","child","isArray","cachedPath","split","parsePath","reduce","pattern","specsOrCallback","callback","specs","exp","flags","RegExp","key","test","undefined","originalCallback","result","root","entries","pair","childPath","node","childFromPath","processSpec","current","props","prop","arrayOp","array","index","count","newItems","mapper","hasChange","newArray","map","newItem","indexes","sorter","newObject","keys","val","constructor","items","indexOf","from","to","temp","obj","mergedObj","createSelectorProxy","context","proxy","Proxy","get","target","set","thisArg","action","backToParent","condition","thenSpec","elseSpec","makeChoice","default","comparer","processSubSpec","limit","applied","newChild","charAt","descendants","substr","update","state","changes","type","selector","batch","remove","toggle","unset","swap","removeAt","if","unless","switch","cloneIfPossible","name","disableAutoClone","getter","setter","nextState"],"mappings":"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","file":"index.js","sourcesContent":["const configs = {\r\n  // for fast performance, we process dot as separator only\r\n  separator: \".\",\r\n  defaultValuePrefix: \"@@\"\r\n};\r\nconst {\r\n  slice: arraySlice,\r\n  shift: arrayShift,\r\n  unshift: arrayUnshift,\r\n  push: arrayPush,\r\n  pop: arrayPop,\r\n  splice: arraySplice,\r\n  sort: arraySort\r\n} = Array.prototype;\r\nconst pathCache = {};\r\nconst contextProp = \"@@context\";\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nfunction isEqual(a, b) {\r\n  if (a instanceof Date && b instanceof Date)\r\n    return a.getTime() === b.getTime();\r\n  return a === b;\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier) {\r\n    const args = arraySlice.call(arguments, 1);\r\n    if (typeof modifier === \"string\") {\r\n      if (modifier in actions) {\r\n        modifier = actions[modifier];\r\n      } else {\r\n        throw new Error(`No action '${modifier}'' defined`);\r\n      }\r\n    }\r\n\r\n    // is batch processing\r\n    if (modifier === $batch) {\r\n      for (let job of args) {\r\n        if (isPlainObject(job)) {\r\n          traversal(this, job);\r\n        } else {\r\n          if (typeof job === \"function\") {\r\n            job = [job];\r\n          }\r\n          this.apply.apply(this, job);\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n\r\n    let newValue = modifier.apply(\r\n      null,\r\n      [\r\n        this.value instanceof Date ? new Date(this.value.getTime()) : this.value\r\n      ].concat(args)\r\n    );\r\n\r\n    // need special context\r\n    while (typeof newValue === \"function\") {\r\n      newValue = newValue(this);\r\n    }\r\n    // nothing to change\r\n    if (newValue === this) {\r\n      return this;\r\n    }\r\n\r\n    if (!isEqual(newValue, this.value)) {\r\n      this.value = newValue;\r\n      this.change(true);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change(valueUpdated) {\r\n    // notify to parent that child value is changed\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n\r\n    if (this.children.length) {\r\n      // if this is parent, we must clone its value\r\n      if (!this.changed) {\r\n        this.changed = true;\r\n        this.value = clone(this.value);\r\n        for (let x of this.children) {\r\n          if (x.parent === this) {\r\n            this.value[x.path] = x.value;\r\n          }\r\n        }\r\n      } else if (valueUpdated) {\r\n        this.children = this.children.filter(x => {\r\n          if (x.parent === this && x.path in this.value) {\r\n            x.value = this.value[x.path];\r\n            return true;\r\n          }\r\n          // child is removed, so we detach the child\r\n          delete x.parent;\r\n          delete this.childMap[x.path];\r\n          return false;\r\n        });\r\n      }\r\n    }\r\n\r\n    // update parent model\r\n    if (this.parent) {\r\n      this.parent.value[this.path] = this.value;\r\n    }\r\n  }\r\n\r\n  backToParent() {\r\n    // make sure child should be removed fron its parent\r\n    this.parent.children = this.parent.children.filter(x => x !== this);\r\n    delete this.parent.childMap[this.path];\r\n    return this.parent;\r\n  }\r\n\r\n  child(path, defaultFactory) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const isExisting = path in this.value;\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n\r\n    if (!isExisting && defaultFactory) {\r\n      child.value = defaultFactory(this.value, path);\r\n      child.change(true);\r\n    }\r\n\r\n    return child;\r\n  }\r\n\r\n  parsePath(path) {\r\n    if (Array.isArray(path)) return path;\r\n    const cachedPath = pathCache[path];\r\n    if (cachedPath) return cachedPath;\r\n    return (pathCache[path] = path.split(configs.separator));\r\n  }\r\n\r\n  childFromPath(path, defaultFactory) {\r\n    return this.parsePath(path).reduce(\r\n      (parent, path) => parent.child(path, defaultFactory),\r\n      this\r\n    );\r\n  }\r\n\r\n  descendants(pattern, specsOrCallback) {\r\n    let callback;\r\n    if (pattern) {\r\n      // match node by pattern and data must be specs\r\n      const specs = specsOrCallback;\r\n      // convert pattern to regex\r\n      const [, exp, flags] = pattern.split(\"/\");\r\n      pattern = new RegExp(exp, flags);\r\n      callback = function(value) {\r\n        if (typeof value === \"object\") {\r\n          for (let key in value) {\r\n            if (pattern.test(key)) {\r\n              return specs;\r\n            }\r\n          }\r\n        }\r\n        return undefined;\r\n      };\r\n    } else {\r\n      if (Array.isArray(specsOrCallback)) {\r\n        // [match, ...specs]\r\n        // callback can return false to skip checking node or return spec index\r\n        const originalCallback = specsOrCallback[0];\r\n        const specs = specsOrCallback.slice(1);\r\n        callback = function() {\r\n          const result = originalCallback.apply(null, arguments);\r\n          if (typeof result === \"number\") {\r\n            return specs[result];\r\n          }\r\n          return result ? specs[0] : undefined;\r\n        };\r\n      } else {\r\n        // data must be callback func, it will be called when visit node\r\n        callback = specsOrCallback;\r\n      }\r\n    }\r\n\r\n    function traversal(root, parent, path) {\r\n      if (Array.isArray(parent) || isPlainObject(parent)) {\r\n        for (let pair of Object.entries(parent)) {\r\n          const value = pair[1];\r\n          const key = pair[0];\r\n          const childPath = path.concat(key);\r\n          const specs = callback(value, key);\r\n          if (specs) {\r\n            // create node from path\r\n            const node = root.childFromPath(childPath);\r\n            processSpec(node, specs);\r\n          }\r\n          traversal(root, value, childPath);\r\n        }\r\n      }\r\n    }\r\n\r\n    traversal(this, this.value, []);\r\n  }\r\n}\r\n\r\nexport function $toggle(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  for (let prop of props) {\r\n    newValue[prop] = !newValue[prop];\r\n  }\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  // no prop to unset => unset its self\r\n  if (!props.length) {\r\n    return function(node) {\r\n      const parent = node.parent;\r\n      if (!parent) {\r\n        return current;\r\n      }\r\n\r\n      if (node.path in parent.value) {\r\n        if (!parent.changed) {\r\n          parent.value = clone(parent.value);\r\n        }\r\n        if (Array.isArray(parent.value)) {\r\n          parent.value.splice(node.path, 1);\r\n        } else {\r\n          delete parent.value[node.path];\r\n        }\r\n        delete node.parent;\r\n        parent.change(true);\r\n      } else {\r\n        // not exist in parent value\r\n      }\r\n    };\r\n  }\r\n\r\n  if (!current) return;\r\n  let newValue = current;\r\n  if (typeof props[0] === \"function\") {\r\n    const filter = props[0];\r\n    for (let prop in current) {\r\n      if (!filter(current[prop], prop)) {\r\n        if (newValue === current) {\r\n          newValue = {};\r\n        }\r\n        newValue[prop] = current[prop];\r\n      }\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  for (let prop of props) {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  }\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, modifier) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice(0);\r\n  }\r\n  modifier(array);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count) {\r\n  const newItems = arraySlice.call(arguments, 3);\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, x =>\r\n      arraySplice.apply(x, [index, count].concat(newItems))\r\n    );\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $map(array, mapper) {\r\n  let hasChange = false;\r\n  const newArray = array.map(function() {\r\n    const newItem = mapper.apply(this, arguments);\r\n    if (newItem !== arguments[0]) {\r\n      hasChange = true;\r\n    }\r\n    return newItem;\r\n  });\r\n  return hasChange ? newArray : array;\r\n}\r\n\r\nexport function $removeAt(array) {\r\n  const indexes = arraySlice.call(arguments, 1);\r\n  let newArray = array;\r\n  // remove from bottom to top\r\n  indexes.sort();\r\n  while (indexes.length) {\r\n    const index = indexes.pop();\r\n    if (index >= 0 && index < newArray.length) {\r\n      if (newArray === array) {\r\n        newArray = newArray.slice();\r\n      }\r\n      newArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  return newArray;\r\n}\r\n\r\nexport function $push(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayPush.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $filter(array, filter) {\r\n  const newArray = array.filter(filter);\r\n  if (newArray.length !== array.length) return newArray;\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayUnshift.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.pop());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.shift());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, x => x.sort(sorter));\r\n}\r\n\r\nfunction clone(value) {\r\n  if (Array.isArray(value)) {\r\n    return value.concat([]);\r\n  }\r\n  if (value === null || value === undefined || isPlainObject(value)) {\r\n    const newObject = {};\r\n    for (let prop of Object.keys(value)) {\r\n      newObject[prop] = value[prop];\r\n    }\r\n    return newObject;\r\n  }\r\n  return value;\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nexport function $remove(array) {\r\n  const items = arraySlice.call(arguments, 1);\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $assign(obj) {\r\n  const length = arguments.length;\r\n  let mergedObj = obj;\r\n  let changed = false;\r\n  for (let index = 1; index < length; index++) {\r\n    const value = arguments[index];\r\n    if (value === null || value === undefined) {\r\n      continue;\r\n    }\r\n    for (let key of Object.keys(value)) {\r\n      if (value[key] !== mergedObj[key]) {\r\n        if (!changed) {\r\n          changed = true;\r\n          // clone before updating\r\n          mergedObj = {};\r\n          for (let prop of Object.keys(obj)) {\r\n            mergedObj[prop] = obj[prop];\r\n          }\r\n        }\r\n        mergedObj[key] = value[key];\r\n      }\r\n    }\r\n  }\r\n  return mergedObj;\r\n}\r\n\r\nfunction createSelectorProxy(context) {\r\n  const proxy = new Proxy(x => undefined, {\r\n    get(target, prop) {\r\n      if (prop === contextProp) return context;\r\n      context = context.child(prop);\r\n      return proxy;\r\n    },\r\n    set(target, prop, value) {\r\n      context.apply($set, prop, value);\r\n      return proxy;\r\n    },\r\n    apply(target, thisArg, args) {\r\n      const action = context.path;\r\n      // back to parent node\r\n      context = context.backToParent();\r\n      context.apply.apply(context, [action].concat(args));\r\n      return proxy;\r\n    }\r\n  });\r\n  return proxy;\r\n}\r\n\r\nexport function spec(value) {\r\n  return function(node) {\r\n    if (value) {\r\n      processSpec(node, value);\r\n    }\r\n    return node;\r\n  };\r\n}\r\n\r\nexport function $if(current, condition, thenSpec, elseSpec) {\r\n  return spec(condition(current) ? thenSpec : elseSpec);\r\n}\r\n\r\nexport function $switch(current, makeChoice, specs = {}) {\r\n  if (!(typeof makeChoice === \"function\")) {\r\n    specs = makeChoice;\r\n    makeChoice = null;\r\n  }\r\n  return spec(\r\n    specs[typeof makeChoice === \"function\" ? makeChoice(current) : current] ||\r\n      specs.default\r\n  );\r\n}\r\n\r\nexport function $unless(current, condition, value) {\r\n  return spec(condition(current) ? undefined : value);\r\n}\r\n\r\nexport function $set(current, prop, value, comparer = isEqual) {\r\n  if (arguments.length < 3) {\r\n    return prop;\r\n  }\r\n\r\n  if (typeof value === \"function\") {\r\n    value = value(current[prop], current);\r\n  }\r\n\r\n  if (comparer(current[prop], value)) return current;\r\n\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nfunction processSpec(child, value) {\r\n  // is main spec\r\n  if (typeof value[0] === \"function\" || typeof value[0] === \"string\") {\r\n    // is modifier and its args\r\n    child.apply.apply(child, value);\r\n  } else {\r\n    processSubSpec(child, value);\r\n  }\r\n}\r\n\r\nfunction processSubSpec(child, value) {\r\n  // is sub spec\r\n  const spec = value[0];\r\n  if (Array.isArray(spec)) {\r\n    const filter = value[1];\r\n    const limit = value[2];\r\n    let applied = 0;\r\n    // apply for each child\r\n    for (let key of Object.keys(child.value)) {\r\n      // only apply spec for child which is satisfied filter\r\n      if (filter && !filter(child.value[key], key)) {\r\n        continue;\r\n      }\r\n      const newChild = child.child(key);\r\n      newChild.apply.apply(newChild, spec);\r\n      applied++;\r\n      if (limit && applied >= limit) {\r\n        break;\r\n      }\r\n    }\r\n  } else {\r\n    for (let key of Object.keys(child.value)) {\r\n      traversal(child.child(key), spec);\r\n    }\r\n  }\r\n}\r\n\r\nfunction traversal(parent, node) {\r\n  for (let key of Object.keys(node)) {\r\n    // dont process default value\r\n    if (key.indexOf(configs.defaultValuePrefix) === 0) {\r\n      continue;\r\n    }\r\n    let value = node[key];\r\n    if (key.charAt(0) === \"?\") {\r\n      // is wildcard\r\n      parent.descendants(key.substr(1), value);\r\n      continue;\r\n    }\r\n    // convert obj method to custom modifier\r\n    if (typeof value === \"function\") {\r\n      value = [value];\r\n    }\r\n    const child = parent.childFromPath(\r\n      key,\r\n      // get default value factory\r\n      node[configs.defaultValuePrefix + key]\r\n    );\r\n    if (Array.isArray(value)) {\r\n      processSpec(child, value);\r\n    } else if (isPlainObject(value)) {\r\n      traversal(child, value);\r\n    } else {\r\n      child.apply($set, value);\r\n    }\r\n  }\r\n}\r\n\r\n// a token to determine batch actions\r\nexport function $batch() {\r\n  // do nothing\r\n}\r\n\r\nexport const update = function(state, changes) {\r\n  // create curry func\r\n  if (arguments.length === 1) {\r\n    changes = state;\r\n    return state => update(state, changes);\r\n  }\r\n  const root = new Immutable(state);\r\n  root.type = \"root\";\r\n\r\n  if (arguments.length > 2) {\r\n    // multiple specs\r\n    processSpec(root, [$batch, ...[].slice.call(arguments, 1)]);\r\n  } else if (Array.isArray(changes)) {\r\n    processSpec(root, changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n};\r\n\r\nexport function updatePath(state, ...specs) {\r\n  const root = new Immutable(state);\r\n\r\n  for (let spec of specs) {\r\n    if (typeof spec === \"function\") {\r\n      spec = [spec];\r\n    }\r\n    const selector = spec[0];\r\n    const args = spec.slice(1);\r\n    const node = selector(createSelectorProxy(root))[contextProp];\r\n    if (args.length) {\r\n      node.apply.apply(node, args);\r\n    }\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport default update;\r\n\r\nexport const actions = {\r\n  $batch,\r\n  batch: $batch,\r\n  \"=\": $set,\r\n  $assign,\r\n  assign: $assign,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap,\r\n  $removeAt,\r\n  removeAt: $removeAt,\r\n  if: $if,\r\n  $if,\r\n  $unless,\r\n  unless: $unless,\r\n  $switch,\r\n  switch: $switch,\r\n  $filter,\r\n  filter: $filter,\r\n  map: $map,\r\n  $map\r\n};\r\n\r\nfunction cloneIfPossible(callback) {\r\n  return function() {\r\n    arguments[0] = clone(arguments[0]);\r\n    return callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nexport function define(name, action, disableAutoClone) {\r\n  // define(actionHash, disableAutoClone)\r\n  if (isPlainObject(name)) {\r\n    disableAutoClone = action;\r\n    for (let pair of Object.entries(name)) {\r\n      actions[pair[0]] = disableAutoClone\r\n        ? pair.value\r\n        : cloneIfPossible(pair[1]);\r\n    }\r\n  } else {\r\n    // define(name, action, disableAutoClone)\r\n    actions[name] = disableAutoClone ? action : cloneIfPossible(action);\r\n  }\r\n}\r\n\r\nexport function createModifier(getter, setter) {\r\n  return Object.assign(\r\n    function(specs) {\r\n      const state = getter();\r\n      const nextState = update(state, specs);\r\n      if (state !== nextState) {\r\n        setter(nextState);\r\n      }\r\n    },\r\n    {\r\n      set(nextState) {\r\n        if (nextState === null || nextState === undefined) return;\r\n        const state = getter();\r\n        if (!state) {\r\n          setter(nextState);\r\n          return;\r\n        }\r\n        for (let prop in nextState) {\r\n          if (state[prop] !== nextState) {\r\n            setter(nextState);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function defaultOf(prop) {\r\n  return configs.defaultValuePrefix + prop;\r\n}\r\n"]}