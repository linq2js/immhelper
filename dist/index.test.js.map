{"version":3,"sources":["../index.test.js"],"names":["describe","it","original","obj","name","result","expect","toEqual","specs","undefinedChild","def","value","e","message","toBe","a","b","c","d","f","arrayPush","objMerge","toggleMe","toggleMyProp","done","completed","removeSecond","removeAppleAndBanana","unsetMyProp","data1","Date","data2","sqrt","doubleItems","swapItems","increaseProps","one","two","three","removeByIndexes","batchProcessing","pipeProcessing","doubleOddNumbers","parentNode","childNode","parentNodes","id","updateTree","text","children","data","usingIfToUpdate","usingUnlessToUpdate","dataLoaded","usingSwitchToUpdate1","usingSwitchToUpdate2","usingFilter","unsetWithFilter","data3","data4","$set","$push","$assign","age","school","x","Math","$toggle","$unset","$splice","$remove","toUpperCase","node","prop","undefined","default","male","key","not","newProp","deleted","isEven","isOdd","sex","push","push7","unshift7","$unshift","spliceData","mergeData","toggleData","removed","g","h","i","j","l","m","n","modified","nextState","$modifier","set"],"mappings":"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","file":"index.test.js","sourcesContent":["import {\r\n  update,\r\n  updatePath,\r\n  $push,\r\n  $unshift,\r\n  $splice,\r\n  $assign,\r\n  $toggle,\r\n  $unset,\r\n  $set,\r\n  $remove,\r\n  createModifier\r\n} from \"./index\";\r\n\r\ndescribe(\"samples\", function() {\r\n  it(\"using multiple specs to update\", () => {\r\n    const original = {\r\n      obj: {\r\n        name: \"peter\"\r\n      }\r\n    };\r\n\r\n    const result = update(original, { obj: [\"set\", \"name\", \"mary\"] }, [\r\n      \"set\",\r\n      2,\r\n      false\r\n    ]);\r\n\r\n    expect(result).toEqual({\r\n      obj: {\r\n        name: \"mary\"\r\n      },\r\n      2: false\r\n    });\r\n  });\r\n\r\n  it(\"default value factory should be called if child node is not present in parent node\", () => {\r\n    const original = {};\r\n\r\n    const specs = {\r\n      undefinedChild: [\"set\", \"value\", 1],\r\n      \"@@undefinedChild\": () => ({ def: true })\r\n    };\r\n\r\n    const result = update(original, specs);\r\n\r\n    expect(result).toEqual({\r\n      undefinedChild: {\r\n        def: true,\r\n        value: 1\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should get an error when try to process undefined child node\", () => {\r\n    const original = {};\r\n\r\n    const specs = {\r\n      undefinedChild: [\"set\", \"value\", 1]\r\n    };\r\n\r\n    try {\r\n      update(original, specs);\r\n    } catch (e) {\r\n      expect(e.message).toBe(\"Cannot read property 'value' of undefined\");\r\n    }\r\n  });\r\n\r\n  it(\"all api\", function() {\r\n    const original = {\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [],\r\n      objMerge: {\r\n        name: \"Peter\"\r\n      },\r\n      toggleMe: false,\r\n      toggleMyProp: {\r\n        done: false,\r\n        completed: true\r\n      },\r\n      removeSecond: [1, 2, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\", \"Apple\", \"Banana\"],\r\n      unsetMyProp: {\r\n        data1: new Date(),\r\n        data2: true\r\n      },\r\n      sqrt: 100,\r\n      doubleItems: [1, 2, 3, 4, 5, 6, 7, 8],\r\n      swapItems: [\"left\", \"right\"],\r\n      increaseProps: {\r\n        one: 1,\r\n        two: 2,\r\n        three: 3\r\n      },\r\n      removeByIndexes: [1, 2, 3, 4],\r\n      batchProcessing: {},\r\n      pipeProcessing: \"hello\",\r\n      doubleOddNumbers: [1, 2, 3, 4],\r\n      parentNode: {\r\n        childNode: {}\r\n      },\r\n      parentNodes: [{ id: 0 }, { id: 1 }],\r\n      updateTree: {\r\n        text: \"root\",\r\n        children: [\r\n          {\r\n            text: \"child 1\",\r\n            data: {},\r\n            children: [{ text: \"child 1.1\" }]\r\n          },\r\n          {\r\n            text: \"child 2\",\r\n            data: {},\r\n            children: [{ text: \"child 2.1\" }, { text: \"child 2.2\" }]\r\n          }\r\n        ]\r\n      },\r\n      usingIfToUpdate: {\r\n        value: 1\r\n      },\r\n      usingUnlessToUpdate: {\r\n        dataLoaded: false\r\n      },\r\n      usingSwitchToUpdate1: 1,\r\n      usingSwitchToUpdate2: {\r\n        value: true\r\n      },\r\n      usingFilter: [1, 2, 3, 4, 5],\r\n      unsetWithFilter: {\r\n        data1: true,\r\n        data2: false,\r\n        data3: true,\r\n        data4: false\r\n      }\r\n    };\r\n    const specs = {\r\n      // you can change separator by using configure({ separator: /pattern/ })\r\n      \"a.b.c.d.e.f\": [$set, 100],\r\n      \"a.b.c.d.e\": [$set, \"newProp\", 100],\r\n      arrayPush: [$push, 1, 2, 3, 4, 5],\r\n      objMerge: [$assign, { age: 20 }, { school: \"A\" }],\r\n      // using obj method as modifier\r\n      sqrt(x) {\r\n        return Math.sqrt(x);\r\n      },\r\n      // toggle property itself\r\n      toggleMe: [$toggle],\r\n      // toggle child properties\r\n      toggleMyProp: [$toggle, \"done\", \"completed\"],\r\n      unsetMyProp: [$unset, \"data1\", \"data2\"],\r\n      removeSecond: [$splice, 1, 1],\r\n      // remove array items by its value\r\n      removeAppleAndBanana: [$remove, \"Apple\", \"Banana\"],\r\n      // using sub spec to update all array items\r\n      // sub spec syntax [spec]\r\n      // spec can be [action, ...args] or spec tree { a: {  b: ....} }\r\n      doubleItems: [[x => x * 2]],\r\n      // use action name instead of function\r\n      swapItems: [\"swap\", 0, 1],\r\n      // using sub spec to update all obj values\r\n      increaseProps: [[x => x + 1]],\r\n      removeByIndexes: [\"removeAt\", 3, 1],\r\n      batchProcessing: [\"batch\", [\"set\", \"name\", \"Peter\"], [\"set\", \"age\", 20]],\r\n      pipeProcessing: [\"batch\", x => x.toUpperCase(), x => x + \" WORLD!!!\"],\r\n      //  apply sub spec for only odd numbers\r\n      doubleOddNumbers: [[x => x * 2], x => x % 2],\r\n      parentNode: {\r\n        // remove childNode its self from parentNode\r\n        childNode: [\"unset\"]\r\n      },\r\n      // remove item at index 1 from parentNodes array\r\n      parentNodes: {\r\n        1: [\"unset\"]\r\n      },\r\n      updateTree: {\r\n        // using conditional spec to update all nodes which has text prop, exclude all data nodes\r\n        \"?\": [node => node && node.text, [\"set\", \"done\", true]],\r\n        // do same thing with pattern matching\r\n        \"?/text/i\": [\"set\", \"deleted\", true],\r\n        children: {\r\n          // using diff spec for each node\r\n          \"?\"(node, prop) {\r\n            if (node && node.text) {\r\n              return prop % 2 === 0\r\n                ? [\"set\", \"isEven\", true]\r\n                : [\"set\", \"isOdd\", true];\r\n            }\r\n            return undefined;\r\n          }\r\n        }\r\n      },\r\n      usingIfToUpdate: [\r\n        \"if\",\r\n        x => x % 2 === 0,\r\n        [\"set\", \"isEven\", true],\r\n        [\"set\", \"isOdd\", true]\r\n      ],\r\n      usingUnlessToUpdate: [\r\n        \"unless\",\r\n        x => x.dataLoaded,\r\n        [\"set\", \"text\", \"loading...\"]\r\n      ],\r\n      usingSwitchToUpdate1: [\r\n        \"switch\",\r\n        {\r\n          1: [\"set\", \"one\"],\r\n          2: [\"set\", \"two\"],\r\n          default: [\"set\", \"other\"]\r\n        }\r\n      ],\r\n      usingSwitchToUpdate2: [\r\n        \"switch\",\r\n        x => (x.value ? \"male\" : \"female\"),\r\n        {\r\n          male: [\"set\", \"sex\", \"male\"],\r\n          default: [\"set\", \"sex\", \"female\"]\r\n        }\r\n      ],\r\n      usingFilter: [\"filter\", x => x % 2 === 0],\r\n      unsetWithFilter: [\"unset\", (value, key) => !!value]\r\n    };\r\n    const result = update(original, specs);\r\n\r\n    expect(result).not.toBe(original);\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: 100,\r\n                newProp: 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [1, 2, 3, 4, 5],\r\n      objMerge: {\r\n        name: \"Peter\",\r\n        age: 20,\r\n        school: \"A\"\r\n      },\r\n      toggleMe: true,\r\n      toggleMyProp: {\r\n        done: true,\r\n        completed: false\r\n      },\r\n      unsetMyProp: {},\r\n      sqrt: 10,\r\n      removeSecond: [1, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\"],\r\n      doubleItems: [2, 4, 6, 8, 10, 12, 14, 16],\r\n      swapItems: [\"right\", \"left\"],\r\n      increaseProps: {\r\n        one: 2,\r\n        two: 3,\r\n        three: 4\r\n      },\r\n      removeByIndexes: [1, 3],\r\n      batchProcessing: {\r\n        name: \"Peter\",\r\n        age: 20\r\n      },\r\n      pipeProcessing: \"HELLO WORLD!!!\",\r\n      doubleOddNumbers: [2, 2, 6, 4],\r\n      parentNode: {},\r\n      parentNodes: [{ id: 0 }],\r\n      updateTree: {\r\n        text: \"root\",\r\n        children: [\r\n          {\r\n            text: \"child 1\",\r\n            done: true,\r\n            deleted: true,\r\n            isEven: true,\r\n            data: {},\r\n            children: [\r\n              { text: \"child 1.1\", done: true, deleted: true, isEven: true }\r\n            ]\r\n          },\r\n          {\r\n            text: \"child 2\",\r\n            done: true,\r\n            deleted: true,\r\n            isOdd: true,\r\n            data: {},\r\n            children: [\r\n              { text: \"child 2.1\", done: true, deleted: true, isEven: true },\r\n              { text: \"child 2.2\", done: true, deleted: true, isOdd: true }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      usingIfToUpdate: {\r\n        value: 1,\r\n        isOdd: true\r\n      },\r\n      usingUnlessToUpdate: {\r\n        dataLoaded: false,\r\n        text: \"loading...\"\r\n      },\r\n      usingSwitchToUpdate1: \"one\",\r\n      usingSwitchToUpdate2: {\r\n        value: true,\r\n        sex: \"male\"\r\n      },\r\n      usingFilter: [2, 4],\r\n      unsetWithFilter: {\r\n        data2: false,\r\n        data4: false\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, selector proxy and modifier\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      [x => x.a.b.c, \"push\", 1, 2, 3],\r\n      [x => x.a.b, \"set\", \"name\", \"Peter\"]\r\n    );\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"sub spec for root\", function() {\r\n    const original = [1, 2, 3, 4, 5];\r\n    const result = update(original, [\"push\", 1]);\r\n\r\n    expect(result).toEqual([1, 2, 3, 4, 5, 1]);\r\n  });\r\n\r\n  it(\"sub spec for root\", function() {\r\n    const original = [1, 2, 3, 4, 5];\r\n    const result = update(original, [[x => x * 2]]);\r\n\r\n    expect(result).toEqual([2, 4, 6, 8, 10]);\r\n  });\r\n\r\n  it(\"typescript api, proxy only\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      x => x.a.b.c.push(1, 2, 3),\r\n      x => (x.a.b.name = \"Peter\")\r\n    );\r\n\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"update\", function() {\r\n  describe(\"$push\", function() {\r\n    const push7 = [$push, 7];\r\n    const original = [1];\r\n\r\n    it(\"pushes\", function() {\r\n      expect(update(original, push7)).toEqual([1, 7]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, push7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$push])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$unshift\", function() {\r\n    const unshift7 = [$unshift, 7];\r\n    const original = [1];\r\n    it(\"unshifts\", function() {\r\n      expect(update(original, unshift7)).toEqual([7, 1]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, unshift7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$unshift])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$splice\", function() {\r\n    const original = [1, 4, 3];\r\n    const spliceData = [$splice, 1, 1, 2];\r\n    it(\"splices\", function() {\r\n      expect(update(original, spliceData)).toEqual([1, 2, 3]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, spliceData);\r\n      expect(original).toEqual([1, 4, 3]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$splice])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$assign\", function() {\r\n    const original = { a: \"b\" };\r\n    const mergeData = [$assign, { c: \"d\" }];\r\n    it(\"merges\", function() {\r\n      expect(update(original, mergeData)).toEqual({\r\n        a: \"b\",\r\n        c: \"d\"\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, mergeData);\r\n      expect(original).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: { c: true } } };\r\n      expect(update(original, { a: [$assign] })).toBe(original);\r\n      expect(update(original, { a: [$assign, { b: original.a.b }] })).toBe(\r\n        original\r\n      );\r\n\r\n      // Merging primatives of the same value should return the original.\r\n      expect(update(original, { a: { b: [$assign, { c: true }] } })).toBe(\r\n        original\r\n      );\r\n\r\n      // Two objects are different values even though they are deeply equal.\r\n      expect(update(original, { a: [$assign, { b: { c: true } }] })).not.toBe(\r\n        original\r\n      );\r\n      expect(\r\n        update(original, {\r\n          a: [$assign, { b: original.a.b, c: false }]\r\n        })\r\n      ).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$set\", function() {\r\n    it(\"sets\", function() {\r\n      expect(update({ a: \"b\" }, [$set, { c: \"d\" }])).toEqual({ c: \"d\" });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: \"b\" };\r\n      update(obj, [$set, { c: \"d\" }]);\r\n      expect(obj).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, { a: [$set, 1] })).toBe(original);\r\n      expect(update(original, { a: [$set, 2] })).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$toggle\", function() {\r\n    const original = { a: false, b: true };\r\n    const toggleData = [$toggle, \"a\", \"b\"];\r\n    it(\"toggles false to true and true to false\", function() {\r\n      expect(update(original, toggleData)).toEqual({\r\n        a: true,\r\n        b: false\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: false };\r\n      update(obj, [$toggle, \"a\"]);\r\n      expect(obj).toEqual({ a: false });\r\n    });\r\n  });\r\n\r\n  describe(\"$unset\", function() {\r\n    it(\"unsets\", function() {\r\n      expect(update({ a: \"b\" }, [$unset, \"a\"]).a).toBe(undefined);\r\n    });\r\n    it(\"removes the key from the object\", function() {\r\n      const removed = update({ a: \"b\" }, [$unset, \"a\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n    });\r\n    it(\"removes multiple keys from the object\", function() {\r\n      const original = { a: \"b\", c: \"d\", e: \"f\" };\r\n      const removed = update(original, [$unset, \"a\", \"e\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n      expect(\"a\" in original).toBe(true);\r\n      expect(\"e\" in removed).toBe(false);\r\n      expect(\"e\" in original).toBe(true);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, [$unset, \"b\"])).toBe(original);\r\n      expect(update(original, [$unset, \"a\"])).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"deep update\", function() {\r\n    it(\"works\", function() {\r\n      expect(\r\n        update(\r\n          {\r\n            a: \"b\",\r\n            c: {\r\n              d: \"e\",\r\n              f: [1],\r\n              g: [2],\r\n              h: [3],\r\n              i: { j: \"k\" },\r\n              l: 4,\r\n              m: \"n\"\r\n            }\r\n          },\r\n          {\r\n            c: {\r\n              d: [$set, \"m\"],\r\n              f: [$push, 5],\r\n              g: [$unshift, 6],\r\n              h: [$splice, 0, 1, 7],\r\n              i: [$assign, { n: \"o\" }],\r\n              l: [x => x * 2],\r\n              m: [x => x + x]\r\n            }\r\n          }\r\n        )\r\n      ).toEqual({\r\n        a: \"b\",\r\n        c: {\r\n          d: \"m\",\r\n          f: [1, 5],\r\n          g: [6, 2],\r\n          h: [7],\r\n          i: { j: \"k\", n: \"o\" },\r\n          l: 8,\r\n          m: \"nn\"\r\n        }\r\n      });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: 1 }, c: { d: { e: 1 } } };\r\n\r\n      expect(update(original, { a: { b: [$set, 1] } })).toBe(original);\r\n      expect(update(original, { a: { b: [$set, 1] } }).a).toBe(original.a);\r\n\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } })).toBe(original);\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c).toBe(\r\n        original.c\r\n      );\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c.d).toBe(\r\n        original.c.d\r\n      );\r\n\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        })\r\n      ).toBe(original);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).a\r\n      ).toBe(original.a);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c\r\n      ).toBe(original.c);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c.d\r\n      ).toBe(original.c.d);\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } })).not.toBe(original);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a).not.toBe(original.a);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a.b).not.toBe(\r\n        original.a.b\r\n      );\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } }).c).toBe(original.c);\r\n      expect(update(original, { a: { b: [$set, 2] } }).c.d).toBe(original.c.d);\r\n    });\r\n  });\r\n\r\n  it(\"should accept array spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }] });\r\n  });\r\n\r\n  it(\"should accept object spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }, { a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }, { a: 1 }] });\r\n  });\r\n\r\n  it(\"modifier should call setter if any change detected\", function() {\r\n    const original = { name: \"Peter\" };\r\n    let nextState = original;\r\n    const $modifier = createModifier(() => original, x => (nextState = x));\r\n\r\n    $modifier({\r\n      name: \"Mary\"\r\n    });\r\n\r\n    expect(original).not.toBe(nextState);\r\n  });\r\n\r\n  it(\"modifier should not call setter if no change detected\", function() {\r\n    const original = { name: \"Peter\" };\r\n    let nextState = original;\r\n    const $modifier = createModifier(() => original, x => (nextState = x));\r\n\r\n    $modifier({\r\n      // empty specs\r\n    });\r\n\r\n    $modifier.set({});\r\n\r\n    expect(original).toBe(nextState);\r\n  });\r\n});\r\n"]}